{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;}
\margl1440\margr1440\vieww18380\viewh9960\viewkind0
\deftab720
\pard\pardeftab720\sl420\sa280

\f0\b\fs28 \cf2 \cb3 Class
\b0 : MapGraph\

\b Modifications made to MapGraph (what and why):\
\pard\pardeftab720\sl420\sa280

\b0 \cf2 1. I added a method called searchPath which actually runs the BFS algorithm from start to the end node. I maintain a map with parent-child relationship to trace bath the path from start to goal and return true if a path is found otherwise false\
2. Another method is constructPath which takes in the parentMap and returns a list containing a path from start to goal node\
3. Also added a method for validating the input parameters of addEdge method. The function is called validateAddEdge\
4. The reason for adding different methods is to allow clear separation of concerns and to allow adding unit tests with ease 	\
\pard\pardeftab720\sl420\sa280

\b \cf2 Class name: 
\b0 MapEdge\

\b Purpose and description of class:\
\pard\pardeftab720\sl420\sa280

\b0 \cf2 1. Purpose of this class is to keep information about each edge\
2. This class contains start and end points, map length, road name and road type\
3. Again this design leads to clean modularization\
\pard\pardeftab720\sl420\sa280

\b \cf2 Overall Design Justification\
\pard\pardeftab720\sl420\sa280

\b0 \cf2 1. MapGraph class contains a map with GeographicPoint as the key and list of MapEdges as the values\
2. Each node in the graph connects to multiple edges which are represented by MapEdge class and we can find additional information about each edge in MapEdge class \
3. Map graph class contains private members which are not to be seen by clients using the graph class
\b \
}